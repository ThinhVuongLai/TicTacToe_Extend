//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/VuongLai/Setting/MyInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInput"",
    ""maps"": [
        {
            ""name"": ""MacOs"",
            ""id"": ""c211ca2f-9ecc-4c21-ac33-e8055888a49a"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2805fe2f-cb7d-4aab-91cf-ee00eff07fc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseTouch"",
                    ""type"": ""Button"",
                    ""id"": ""f70a27b5-374d-4535-a504-8f55024a9647"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""e913d44b-0cd1-4749-a976-7dfaade11b3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d69aed62-b972-4548-9690-cba23d1008aa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""915309a7-aa37-41ba-ae13-3735ddc22929"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ba2e67a-1f09-4412-826f-9541e9b062db"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MacOs
        m_MacOs = asset.FindActionMap("MacOs", throwIfNotFound: true);
        m_MacOs_Jump = m_MacOs.FindAction("Jump", throwIfNotFound: true);
        m_MacOs_MouseTouch = m_MacOs.FindAction("MouseTouch", throwIfNotFound: true);
        m_MacOs_MousePosition = m_MacOs.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MacOs
    private readonly InputActionMap m_MacOs;
    private List<IMacOsActions> m_MacOsActionsCallbackInterfaces = new List<IMacOsActions>();
    private readonly InputAction m_MacOs_Jump;
    private readonly InputAction m_MacOs_MouseTouch;
    private readonly InputAction m_MacOs_MousePosition;
    public struct MacOsActions
    {
        private @MyInput m_Wrapper;
        public MacOsActions(@MyInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_MacOs_Jump;
        public InputAction @MouseTouch => m_Wrapper.m_MacOs_MouseTouch;
        public InputAction @MousePosition => m_Wrapper.m_MacOs_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MacOs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MacOsActions set) { return set.Get(); }
        public void AddCallbacks(IMacOsActions instance)
        {
            if (instance == null || m_Wrapper.m_MacOsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MacOsActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @MouseTouch.started += instance.OnMouseTouch;
            @MouseTouch.performed += instance.OnMouseTouch;
            @MouseTouch.canceled += instance.OnMouseTouch;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IMacOsActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @MouseTouch.started -= instance.OnMouseTouch;
            @MouseTouch.performed -= instance.OnMouseTouch;
            @MouseTouch.canceled -= instance.OnMouseTouch;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IMacOsActions instance)
        {
            if (m_Wrapper.m_MacOsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMacOsActions instance)
        {
            foreach (var item in m_Wrapper.m_MacOsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MacOsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MacOsActions @MacOs => new MacOsActions(this);
    public interface IMacOsActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMouseTouch(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
